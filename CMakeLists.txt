# cmake for SZARP

cmake_minimum_required(VERSION 2.8.11)
project( szarp )

#set( CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules/ )
option( DEBUG "Build in debug mode -- turn on debug symbols" ON )
option( RELEASE "Build in release mode -- quiet all communicates" OFF )
option( DOCUMENTATION "Build also documentation" OFF )
option( TEST "Build also test" OFF )
option( CROSS_MINGW "Turn on cross bulding on mingw32" OFF )
option( UPDATE_TRANSLATIONS "Update source translation files" ON )

if( NOT CROSS_MINGW )
	set( DATA_DIR . )
	set( BIN_DIR bin )
	set( IKS_DIR iks )
	set( LIB_DIR lib )
	set( LOG_DIR log )
	set( RESOURCES_DIR resources )
else( NOT CROSS_MINGW )
	set( DATA_DIR . )
	set( BIN_DIR . )
	set( IKS_DIR . )
	set( LIB_DIR . )
	set( LOG_DIR . )
	set( RESOURCES_DIR . )
endif( NOT CROSS_MINGW )

if( CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX )
	set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall" )
endif( CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX )

add_definitions( -O2 )
add_definitions( -std=gnu+11 )

if( DEBUG )
	add_definitions( -g )
endif( DEBUG )

if( RELEASE )
	# TODO
endif( RELEASE )

add_subdirectory( libSzarp )
add_subdirectory( libSzarp2 )
add_subdirectory( python )
add_subdirectory( sender )
add_subdirectory( parcook )
add_subdirectory( cfgdealer )
add_subdirectory( isl )
add_subdirectory( meaner3 )
add_subdirectory( iks )
add_subdirectory( extern )
add_subdirectory( wx )
add_subdirectory( utils )
add_subdirectory( unit_tests )
add_subdirectory( www )
add_subdirectory( resources )
add_subdirectory( script )
add_subdirectory( qt4 )
